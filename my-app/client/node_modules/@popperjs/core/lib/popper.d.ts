import { popperGenerator, detectOverflow } from "@popperjs/core/lib/createPopper/lib/createPopper";
export * from "@popperjs/core/lib/typesjs/core/lib/types";
declare const defaultModifiers: (import("@popperjs/core/lib/modifiers/popperOffsetsers/popperOffsets").PopperOffsetsMo@popperjs/core/lib/modifiers/flip"@popperjs/core/lib/modifi@popperjs/core/lib/modifiers/hideodifier | import("@popperj@popperjs/core/lib/modifiers/offsetrs/hide").HideModifier | imp@popperjs/core/lib/modifiers/eventListenersdifiers/offset").OffsetModifier | im@popperjs/core/lib/modifiers/computeStylesmodifiers/eventListeners").EventLis@popperjs/core/lib/modifiers/arrowimport("@popperjs/core/lib/@popperjs/core/lib/modifiers/preventOverflowomputeStylesModifier | import("@poppe@popperjs/core/lib/modifiers/applyStylesarrow").ArrowModifier | import("@popperjs/core/lib/modifiers/preventOverflow").PreventOverflowModifier | import("@popperjs/core/lib/modifiers/applyStyles").ApplyStylesModifier)[];
declare const createPopper: <TModifier extends Partial<import("@popperjs/core/lib/typesjs/core/lib/types").Modifier<any, any>>>(reference: E@popperjs/core/lib/types| import("@popperjs/core/lib/types").VirtualElement, popper: HTMLE@popperjs/core/lib/types options?: Partial<import("@popperjs/core/@popperjs/core/lib/typeses").OptionsGeneric<TModifier>>) => import("@popperjs/core/lib/types").Instance;
export { createPopper, popperGenerator, defaultModifiers, detectOverflow };
export { createPopper as createPopperLite } from "@popperjs/core/lib/popper-litee/lib/popper-lite";
export * from "@popperjs/core/lib/modifiersore/lib/modifiers";
